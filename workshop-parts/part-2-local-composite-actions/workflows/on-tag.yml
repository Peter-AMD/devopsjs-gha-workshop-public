name: On Tag (Prod)

# on:
#   push:
#     branches:
#       - main
on:
  push:
    tags:
      - v*

env:
  ATTENDEE_NAME: david-rubio
  ENVIRONMENT: prod
  NODE_VERSION: 14
  AWS_REGION: eu-west-3
  AWS_ACCOUNT_ID_PROD: "<YOUR_ACCOUNT_ID_PROD>"
  TERRAFORM_OUTPUTS_FILE: tf-output.json

jobs:
  init-deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: http://my-app-url.${{ env.ENVIRONMENT }}.com
          environment: ${{ env.ENVIRONMENT }}

  backend:
    name: Install, test, build and upload Lambda
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      LAMBDA_NAME: lambda-greeter
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-test-and-build-be
        with:
          npm_registry_token: ${{ secrets.NPM_REGISTRY_TOKEN }}
      - uses: ./.github/actions/zip-and-upload-be
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_account_id: ${{ env.AWS_ACCOUNT_ID_PROD }}
          bucket_prefix: devopsjs-gha-workshop-${{ env.ENVIRONMENT }}-lambdas
          source_files_path: ./packages/${{ env.LAMBDA_NAME }}/dist
          output_file: ${{ env.LAMBDA_NAME }}

  infra:
    name: Plan and apply Terraform
    needs: backend
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/terraform
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_account_id: ${{ env.AWS_ACCOUNT_ID_PROD }}
          my_secret_token: ${{ secrets.GLOBAL_SECRET_TOKEN_PROD }}
          backend_config: config/prod/config.remote
          var_file: config/prod/terraform.tfvars
          tf_apply: "true"

  frontend:
    name: Build and deploy frontend
    needs: infra
    runs-on: ubuntu-latest
    timeout-minutes: 3
    env:
      FRONTEND_NAME: frontend-greeter
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-build-and-upload-fe
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_account_id: ${{ env.AWS_ACCOUNT_ID_PROD }}

  deployment-status:
    needs:
      - init-deployment
      - backend
      - infra
      - frontend
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Update deployment status (success)
        if: needs.backend.result == 'success' && needs.infra.result == 'success' && needs.frontend.result == 'success'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: http://my-app-url.${{ env.ENVIRONMENT }}.com
          state: "success"
          deployment_id: ${{ needs.init-deployment.outputs.deployment_id }}
      - name: Update deployment status (failure)
        if: needs.backend.result == 'failure' || needs.infra.result == 'failure' || needs.frontend.result == 'failure'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: http://my-app-url.${{ env.ENVIRONMENT }}.com
          state: "failure"
          deployment_id: ${{ needs.init-deployment.outputs.deployment_id }}
