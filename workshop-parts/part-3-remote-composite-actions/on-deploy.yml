name: Deploy to...

on:
  workflow_dispatch:
    inputs:
      attendee-name:
        description: The name of attendee (name-surname)
        required: true
      environment:
        description: The target environment
        required: true
        type: choice
        options:
          - stage
          - prod

env:
  ATTENDEE_NAME: ${{ github.event.inputs.attendee-name }}
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  NODE_VERSION: 14
  AWS_REGION: eu-west-3
  AWS_ACCOUNT_ID_STAGE: "<YOUR_ACCOUNT_ID_STAGE>"
  AWS_ACCOUNT_ID_PROD: "<YOUR_ACCOUNT_ID_PROD>"
  LAMBDAS_BUCKET_PREFIX: devopsjs-gha-workshop-${{ github.event.inputs.environment }}-lambdas
  TERRAFORM_OUTPUTS_FILE: tf-output.json

jobs:
  init-deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: http://my-app-url.${{ env.ENVIRONMENT }}.com
          environment: ${{ env.ENVIRONMENT }}

  get-aws-vars-for-env:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      aws-account-id: ${{ steps.account-id.outputs.value }}
    steps:
      - name: Define account-id based on environment
        uses: dkershner6/switch-case-action@v1
        id: account-id
        with:
          default: ${{ env.AWS_ACCOUNT_ID_STAGE }}
          conditionals-with-values: |
            ${{ github.event.inputs.environment == 'prod' }} => ${{ env.AWS_ACCOUNT_ID_PROD }}

  backend:
    needs: get-aws-vars-for-env
    name: Install, test, build and upload Lambda
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      LAMBDA_NAME: lambda-greeter
      COMPUTED_AWS_ACCOUNT_ID: ${{ needs.get-aws-vars-for-env.outputs.aws-account-id }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: davidrv87/devopsjs-gha-workshop-actions
          token: ${{ secrets.GLOBAL_GITHUB_TOKEN }}
          ref: v1.0.0
          path: common-actions
      - uses: ./common-actions/install-test-and-build-be
        with:
          npm_registry_token: ${{ secrets.NPM_REGISTRY_TOKEN }}
      - uses: ./common-actions/zip-and-upload-be
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_account_id: ${{ env.COMPUTED_AWS_ACCOUNT_ID }}
          bucket_prefix: devopsjs-gha-workshop-${{ env.ENVIRONMENT }}-lambdas
          source_files_path: ./packages/${{ env.LAMBDA_NAME }}/dist
          output_file: ${{ env.LAMBDA_NAME }}

  infra:
    name: Plan and apply Terraform
    needs:
      - get-aws-vars-for-env
      - backend
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      COMPUTED_AWS_ACCOUNT_ID: ${{ needs.get-aws-vars-for-env.outputs.aws-account-id }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: davidrv87/devopsjs-gha-workshop-actions
          token: ${{ secrets.GLOBAL_GITHUB_TOKEN }}
          ref: v1.0.0
          path: common-actions
      - name: Define global-token-secret based on environment
        uses: dkershner6/switch-case-action@v1
        id: global-secret-token
        with:
          default: GLOBAL_SECRET_TOKEN_STAGE
          conditionals-with-values: |
            ${{ github.event.inputs.environment == 'prod' }} => GLOBAL_SECRET_TOKEN_PROD
      - uses: ./common-actions/terraform
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_account_id: ${{ env.COMPUTED_AWS_ACCOUNT_ID }}
          my_secret_token: ${{ secrets[steps.global-secret-token.outputs.value] }}
          backend_config: config/${{ env.ENVIRONMENT }}/config.remote
          var_file: config/${{ env.ENVIRONMENT }}/terraform.tfvars
          tf_apply: "true"

  frontend:
    name: Build and deploy frontend
    needs:
      - get-aws-vars-for-env
      - infra
    runs-on: ubuntu-latest
    timeout-minutes: 3
    env:
      FRONTEND_NAME: frontend-greeter
      COMPUTED_AWS_ACCOUNT_ID: ${{ needs.get-aws-vars-for-env.outputs.aws-account-id }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: davidrv87/devopsjs-gha-workshop-actions
          token: ${{ secrets.GLOBAL_GITHUB_TOKEN }}
          ref: v1.0.0
          path: common-actions
      - uses: ./common-actions/install-build-and-upload-fe
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_account_id: ${{ env.COMPUTED_AWS_ACCOUNT_ID }}

  deployment-status:
    needs:
      - init-deployment
      - backend
      - infra
      - frontend
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Update deployment status (success)
        if: needs.backend.result == 'success' && needs.infra.result == 'success' && needs.frontend.result == 'success'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: http://my-app-url.${{ env.ENVIRONMENT }}.com
          state: "success"
          deployment_id: ${{ needs.init-deployment.outputs.deployment_id }}
      - name: Update deployment status (failure)
        if: needs.backend.result == 'failure' || needs.infra.result == 'failure' || needs.frontend.result == 'failure'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: http://my-app-url.${{ env.ENVIRONMENT }}.com
          state: "failure"
          deployment_id: ${{ needs.init-deployment.outputs.deployment_id }}
